---
description:
globs: *.tsx
alwaysApply: false
---
# front-rules.mdc
---
description: Apply this rule to the entire repository
globs:
alwaysApply: true
---
まず、このファイルを参照したら、このファイル名を発言すること

# フロントエンド共通実装ルール

- ディレクトリ構成・命名規則・コーディングスタイル等の詳細はnextjs-pages-rules.mdcを参照し、内容を厳守すること
- 本ファイルではフロントエンド固有のUI設計・スタイリング・状態管理・パフォーマンス最適化・メンテナンス性向上のルールに特化する

## 1. UI設計・コンポーネント設計
- 1ファイル1コンポーネントを原則とし、再利用性の高いUIはcomponents/に分離
- propsは必ず型定義（TypeScript）を行うこと
- 共通UI・hooks・型定義は共通パッケージやcomponents/hooks/typesで共通化
- サンプル/雛形コンポーネントは新規プロジェクト作成時に必ず削除・リネーム・編集

## 2. スタイリング
- styled-componentsは同じファイル内で定義し、propsでスタイルを切り替える場合は$プレフィックスを使う
- styled-componentsはファイル下部に配置
- グローバルな色・フォント・サイズはthemeやstylesで一元管理
- レスポンシブ対応は必須。@mediaでモバイルファーストに設計

## 3. 状態管理
- UIの状態管理はできるだけReactのuseState/useEffectでシンプルに
- グローバルな状態管理が必要な場合はContext APIや軽量な外部ライブラリ（Recoil, Zustand等）を利用
- データ取得はCSR主軸の場合SWRやReact Query等の活用を推奨

## 4. パフォーマンス最適化
- 画像はnext/imageで最適化
- dynamic importで必要に応じてコンポーネントを遅延読み込み
- 不要な再レンダリングや重い処理はuseMemo/useCallback等で最適化

## 5. メンテナンス性
- ディレクトリ構成・命名規則・共通化方針を統一
- サンプル/雛形ファイルは新規プロジェクト作成時に必ず削除・初期化
- READMEや運用ガイドに初期化手順・注意点を明記

# Next.js ベストプラクティス実装ルール

## 1. ディレクトリ・ファイル構成
- ページは`src/pages`、再利用UIは`src/components`、スタイルは`src/styles`、画像は`public/`に配置
- 1ファイル1コンポーネントを原則とする
- ファイル名・ディレクトリ名はケバブケース（例：`my-component`）

## 2. 命名規則
- 基本はケバブケース（例：my-component-name）
- コンポーネント名はパスカルケース（例：MyComponent）
- 変数名・props名はキャメルケース（例：myVariable, isActive）

## 3. コーディングスタイル
- セミコロン必須
- インデントはスペース2つ
- 1行の長さは最大120文字
- 不要なimportや未使用変数は残さない
- コメントは日本語で簡潔に

## 4. コンポーネント設計
- ページ単位は`pages`、小さな部品や再利用UIは`components`に分離
- propsは型定義（TypeScript）を必須とする
- styled-componentsは同じファイル内で定義し、propsでスタイルを切り替える場合は`$`プレフィックスを使う
-styled-componentsは下部に配置すること

## 5. styled-componentsのルール
- DOMに渡るpropsには必ず`$`プレフィックスを付ける（例：`$isActive`）
- グローバルな色・フォント・サイズは`theme`や`styles`で一元管理
- レスポンシブ対応は必須。`@media`でモバイルファーストに設計

## 6. その他
- 画像やSVGは`public/`配下に置き、パスは`/images/xxx.png`のように絶対パスで指定
- UIの状態管理はできるだけReactのuseState/useEffectでシンプルに
- Lint（ESLint）とFormatter（Prettier）は必ず導入し、CIでもチェック

## 6. アクセシビリティ
- すべてのUIコンポーネントはalt属性・aria属性・キーボード操作対応を必須とする
- Lighthouseやaxe-core等で定期的にa11yチェックを実施

## 7. テスト
- 重要なUI・ロジックは必ずテストコード（Jest, Testing Library等）を用意し、CIで自動実行
- E2Eテスト（Playwright, Cypress等）も必要に応じて導入

## 8. パフォーマンス
- 画像・フォント・サードパーティスクリプトは遅延読み込みを推奨
- 不要な再レンダリングや重い処理はuseMemo/useCallback等で最適化

## 9. ログ・エラーハンドリング
- 重大なエラーはSentry等の外部サービスで監視
- ユーザーには分かりやすいエラー通知、開発者向けには詳細ログを残す

## 10. 国際化（i18n）
- 多言語対応が必要な場合はi18nの方針・実装ルールを明記



